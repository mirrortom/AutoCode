@{
  string divListId = Model.tableName + "List";
  string apiListUrlKey = "Api" + Model.TableName + "List";
}
<div class="page">
  <div class="mg-tb-20">
    <p class="article-title warning">搜索 <a id="clearSearchBtn" class="btn sm gray mg-l-10" searchFlag="0">清除搜索</a></p>
    <div id="msginfobox"></div>
  </div>
  <div id="@divListId"></div>
  <hr class="line" />
  <p class="text-center">-- 到底了 --</p>
</div>
<script>
  ((win) => {
    // help
    let post = win.ns.post;
    let postAsync = win.ns.postAsync;
    let get = win.ns.get;
    let cfg = win.ns.cfg;
    let router = win.ns.router;
    let errtxt = win.ns.errtxt;
    let msg = win.msgshow('msginfobox');
    //===========
    // page init
    //===========
    createSearch();
    list();

    //===========
    // function
    //===========

    // table data
    async function list() {
      let searchKeys = getSearchKeys();
      let data = await postAsync(cfg.@apiListUrlKey, searchKeys);
      try {
        if (data.errcode == @AutoCode.ErrCode.Success) {
            msg.clear();
            createTable(data.list);
          } else if (data.errcode == @AutoCode.ErrCode.SrvExp) {
            msg.err(data.errmsg || errtxt[data.errcode]);
          } else {
            $('#@divListId').empty();
            msg.info(data.errmsg || errtxt[data.errcode]);
          }
      } catch (err) {
        msg.err(err.message);
      }
    }
    function createTable(data) {
      // tab header
      let th = '@Raw(Model.tableDataHeads+"<th>操作</th>")';
      // rows
      let rows = '';
      for (var i = 0, len = data.length; i < len; i++) {
        let item = data[i];
        let cols = `@Raw(Model.tableDataCols)`;
        // btns
        cols += '<td>';
        cols += `<a class="btn update-btns sm" dataid="${item.Id}">更新</a> `;
        cols += `<input class="onoff-check sm" id="${item.Id}" type="checkbox" ${item.Status == 1 ? "checked" : ""}/><label class="onoff-label" for="${item.Id}" ></label>`;
        cols += '</td>';
        // 支持的搜索条件添加在tr元素上(当前端实现搜索时)
        rows += `<tr @(Model.tableName+"Id")="${item.Id}">${cols}</tr>`;
      }
      let table = `<table class="table border-all"><tr>${th}</tr>${rows}</table>`;
      $('#@divListId').empty().html(table);
      //
      opBind();
    }
    // 操作事件绑定
    function opBind() {
      return;
      // 更新
      $('#@divListId .update-btns').click(item => {
        // router.goto('/html/@(Model.tableName+"add.html")', { op: 'edit', @(Model.tableName+"Id"): $(item).prop('dataid') });
      });
      // on off事件
      $('#@divListId .onoff-label').click(item => {
        // 注意选中状态,这里获得的是点击前的状态.例如:如果是选中,点击后会变成没选中.所以应该上传没选中.
        // let ischeck = $(item).prev()[0].checked;
        // post(cfg.ApiKVOnOff, { table: '@Model.tableName', id: $(item).prop('for'), status: ischeck ? 2 : 1 });
      });
    }
    // ==========================================================================================
    // == 搜索:添加步骤如下 ==
    // 1.html添加,容器id命名按照约定,例如: [cuser]Search[Input] 分3段,字段名字,Search固定,搜索控件类型
    // 2.在createSearch方法里加入条件,每个条件一个方法.例如: cuserSearchInputFun
    // 2-1. 添加搜索条件实现的方法:cuserSearchInputFun,实现搜索条件生成,调用数据获取,设置搜索状态为1(已搜索状态)
    // 3.在getSearchKeys里添加获取这个搜索条件值的代码
    // 4.在resetSearch里添加重置这个搜索条件值的代码
    // ==========================================================================================

    // 生成搜索条件
    // refresh=true 强制重新生成搜索条件
    // 要加新的搜索方式时,在此方法加.
    function createSearch(refresh) {
      // 为了在切换页面时,保留上次的搜索条件和结果,判断是否搜索过.没有搜索过才生成
      if (searchFlag() == 1 && refresh != true) return;

      // 支持的搜索选项在此添加,每个条件一个方法
      // cuserSearchInputFun();
      // deptSearchBtnsFun();

      // 重置搜索按钮,事件绑定
      $('#clearSearchBtn').click(() => {
        resetSearch();
        list();
        searchFlag(0)
      });
    }
    // 人员search
    function cuserSearchInputFun() {
      //inputValWatch($('#cuserSearchInput')[0], (val) => {
      //  list();
      //  searchFlag(1);
      //})
    }
    // 部门search
    function deptSearchBtnsFun() {
      //common.createDeptSearchBtn('deptSearchBtns', () => {
      //  list();
      //  searchFlag(1);
      //})
    }
    // 获取搜索条件,返回一个json
    // 每次添加搜索选项后,需要在此加入对应的值
    function getSearchKeys() {
      let para = {};
      //// 员工
      //let cuser = $('#cuserSearchInput').val();
      //if (cuser.length > 0)
      //  para.cuser = cuser;
      //// 部门
      //let depts = [];
      //$('#deptSearchBtns .btn.warning').each(item => {
      //  depts.push($(item).prop('deptid'));
      //})
      //if (depts.length > 0)
      //  para.dept = depts.join(',');
      return para;
    }

    // 搜索区域使用标志,1=已经使用过搜索 0=未使用过.不传则返回标志.
    function searchFlag(flag) {
      if (flag == undefined) {
        return $('#clearSearchBtn').prop('searchFlag');
      }
      $('#clearSearchBtn').prop('searchFlag', flag);
    }
    // 重置所有搜索条件
    function resetSearch() {
      //$('#cuserSearchInput').val('');
      //$('#mgrSearchInput').val('');
      //$('#deptSearchBtns .btn').removeClass('warning');
    }
  })(window);
</script>