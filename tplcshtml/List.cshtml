@{
  string divListId = Model.tableName + "List";
  string apiListUrlKey = "Api" + Model.TableName + "List";
}
<div class="page">
  <div class="mg-tb-20">
    <p class="article-title warning">搜索 <a id="clearSearchBtn" class="btn sm gray mg-l-10" searchFlag="0">清除搜索</a></p>
    <div id="msginfobox"></div>
  </div>
  <div id="@divListId"></div>
  <hr class="line" />
  <p class="text-center">-- 到底了 --</p>
</div>
<script>
  ((win) => {
    // help
    let post = win.ns.post;
    let get = win.ns.get;
    let cfg = win.ns.cfg;
    let router = win.ns.router;
    let msg = win.msgshow('msginfobox');
    //===========
    // page init
    //===========
    list();
    clearSearchBtn_click();

    //===========
    // function
    //===========

    // table data
    function list() {
      post(cfg.@apiListUrlKey, {})
        .then(data => {
          if (data.errcode == @AutoCode.ErrCode.Success) {
            createTable(data.list);
            createSearch(data.list);
            refreshTableBySearchBtn();
          } else if (data.errcode == @AutoCode.ErrCode.SrvExp) {
            msg.err(data.errmsg || '@AutoCode.AlertMsg.服务器错误.ToString()');
          } else
            msg.info(data.errmsg || '@AutoCode.AlertMsg.没有数据.ToString()');
        })
        .catch(err => {
          msg.err(err.message);
        });
    }
    function createTable(data) {
      // tab header
      let th = '@Raw(Model.tableDataHeads+"<th>操作</th>")';
      // rows
      let rows = '';
      for (var i = 0, len = data.length; i < len; i++) {
        let item = data[i];
        let cols = `@Raw(Model.tableDataCols)`;
        // btns
        cols += '<td>';
        cols += `<a class="btn update-btns" dataid="${item.Id}">更新</a> `;
        cols += `<input class="onoff-check" id="${item.Id}" type="checkbox" ${item.Status == 1 ? "checked" : ""}/><label class="onoff-label" for="${item.Id}" ></label>`;
        cols += '</td>';
        // 支持的搜索条件添加在tr元素上
        rows += `<tr @(Model.tableName+"Id")="${item.Id}">${cols}</tr>`;
      }
      let table = `<table class="table border-all hover">${th}${rows}</table>`;
      $('#@divListId').empty().html(table);
      //
      opBind();
    }
    // 操作事件绑定
    function opBind() {
      return;
      // 更新
      $('#@divListId .update-btns').click(item => {
        // router.goto('/html/@(Model.tableName+"add.html")', { op: 'edit', @(Model.tableName+"Id"): $(item).prop('dataid') });
      });
      // on off事件
      $('#@divListId .onoff-label').click(item => {
        // 注意选中状态,这里获得的是点击前的状态.例如:如果是选中,点击后会变成没选中.所以应该上传没选中.
        // let ischeck = $(item).prev()[0].checked;
        // post(cfg.ApiKVOnOff, { table: '@Model.tableName', id: $(item).prop('for'), status: ischeck ? 2 : 1 });
      });
    }
    // =====
    // 搜索
    // =====
    // 生成搜索条件,搜索是前端的实现.根据资产列表数据生成搜索条件.
    // refresh=true 强制重新生成标题列表
    // 要加新的搜索方式时,在此方法加.(具体参考已实现的搜索函数,注意:数据表格tr元素上添加匹配条件)
    function createSearch(data, refresh) {
      // 为了在切换页面时,保留上次的搜索条件和结果,判断是否搜索过.没有搜索过才生成
      if (searchFlag() == 1 && refresh != true) return;
    }

    // 根据搜索按钮状态,显示资产表格内容
    function refreshTableBySearchBtn() {
      // 没有一个搜索选中按钮(或者搜索区数据还没有生成),显示全部
    }

    // 搜索区域使用标志,1=已经使用过搜索 0=未使用过.不传则返回标志.
    function searchFlag(flag) {
      if (flag == undefined) {
        return $('#clearSearchBtn').prop('searchFlag');
      }
      $('#clearSearchBtn').prop('searchFlag', flag);
    }
    // 清空(恢复)搜索按钮
    function clearSearchBtn_click() {
      $('#clearSearchBtn').click(() => {
        // 显示所有资产
        $('#@divListId tr').removeClass('d-none');
        // 重新获取数据,生成搜索
        list();
        // 按钮属性 searchFlag 0=未使用过搜索 1=已经使用过搜索
        searchFlag(0);
      })
    }
  })(window);
</script>