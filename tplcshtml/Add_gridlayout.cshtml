@{
  string divEditId = Model.tableName + "EditForm";
  string pkId = Model.tableName + "Id";
  string submitBtnId = "add" + Model.TableName + "Btn";
  string apiAddUrlKey = "Api" + Model.TableName + "Add";
  string apiItemUrlKey = "Api" + Model.TableName + "Item";
}
<div class="page" id="@divEditId">
  <input type="hidden" name="Id" value="" id="@pkId" />
  <input type="hidden" name="ItemCode" value="" />
  <p class="article-title"><span class="label" id="editFormTitle" edittype="0"></span></p>
  @foreach (Dictionary<string, string> item in Model.columns)
  {
    string dbtype = item["dbtype"];
    <div class="grids">
      <label class="input-label grid-2 grid-md-1">@item["fieldTitle"]</label>
      @if (dbtype.Contains("date"))
      {
        <input class="input-text grid" name="@item["fieldName"]" vtype="notnull|date" verrmsg="必填项|日期无效" type="text" value="" onclick="MyDatePick()" placeholder="请输入 @item["fieldTitle"]">
      }
      else if (dbtype.Contains("char"))
      {
        string maxLen = item["validMaxLen"];
        <input class="input-text grid" name="@item["fieldName"]" vtype="notnull|maxlen" verrmsg="必填项|不超过 @maxLen 个字符" maxlength="@maxLen" type="text" value="" placeholder="请输入 @item["fieldTitle"]">
      }
      else
      {
        <input class="input-text grid" name="@item["fieldName"]" vtype="notnull" verrmsg="必填项" type="text" value="" placeholder="请输入 @item["fieldTitle"]">
      }
    </div>
  }
  <hr class="line" />
  <div class="grids-3">
    <a class="btn lg success" id="@submitBtnId">提交</a>
    <i></i>
    <a class="btn lg" id="resetFormBtn">清空(重置)</a>
  </div>
  <div class="mg-tb-10" id="msginfobox"></div>
</div>
<script>
  ((win) => {
    // help
    let post = win.ns.post;
    let get = win.ns.get;
    let cfg = win.ns.cfg;
    let page = win.ns.page;
    let token = win.ns.token;
    let router = win.ns.router;
    let msg = win.msgshow('msginfobox');

    //===========
    // page init
    //===========
    // 页面处于编辑状态时,不改变表单数据和状态标题
    if (chgTitle() != 1) {
      // 去掉上次的提示语
      msg.clear();
      chgTitle(0);
      resetForm();
      // 下拉框数据
      // createKVOptions('1,2,3,4', initSelects);
    }

    // 绑定提交按钮
    $('#@submitBtnId').click(thisBtn => {
      add(thisBtn);
    });
    // 绑定重置
    $('#resetFormBtn').click(thisBtn => {
      resetForm();
    });
    // list页面跳过来编辑,使用数据填充表单
    if (router.para && router.para.op == 'edit' && router.para.@pkId) {
      $('#@pkId').val(router.para.@pkId);
      // 编辑时请求数据,如果出错,尝试20次
      initEditData();
      router.para = null;
    }
    //===========
    // function
    //===========
    /**
     * 由list页面跳过来编辑时,需要请求数据填充表单.
     * @@param {number} maxCount 最多请求次数
     */
    function initEditData(maxCount = 20) {
      return;
      // 要等待下拉框数据填充后,才请求
      if (!$('#selectid1 option').length || !$('#selectid2 option').length) {
        if (maxCount <= 0) return;
        setTimeout(() => { initEditData(maxCount - 1) }, 500);
        return;
      }
      post(cfg.@apiItemUrlKey, { id: $('#@pkId').val() })
        .then(data => {
          if (data.errcode == @AutoCode.ErrCode.Success) {
            let item = data.item;
            // 填充表单
            $('#@divEditId input[name]').each(o => {
              o.value = item[o.name];
            })
            // 选中选项
            $('#selectid1 option[value="' + item.ExcOrg + '"]')[0].selected = 'selected';
            // 提示更新状态
            chgTitle(1);
          } else if (data.errcode ==@AutoCode.ErrCode.SrvExp) {
            msg.err(data.errmsg || '@AutoCode.AlertMsg.服务器错误.ToString()');
          } else
            msg.info(data.errmsg);
        })
        .catch(err => {
          msg.err(err.message);
        });
    }
    /**
     * 下拉框填充数据(选项数据来自kv表)
     * @@param {number|string} kvCategorys 下拉框数据分组类型,多个分组逗号隔开
     * @@param {Function} successE 获取数据成功时执行,success(data)
     * @@return {any} data 取回一个以分组名为键,数组为值的json对象
     */
    function createKVOptions(kvCategorys, successE) {
      return;
      post(cfg.ApiKVList, { categorys: kvCategorys, fields: 'id,comment,title,enabled' })
        .then(data => {
          if (data.errcode == @AutoCode.ErrCode.Success) {
            successE(data.list);
          } else if (data.errcode == @AutoCode.ErrCode.SrvExp) {
            msg.err(data.errmsg || '@AutoCode.AlertMsg.服务器错误.ToString()');
          } else
            msg.info(data.errmsg);
        })
        .catch(err => {
          msg.err(err.message);
        });
    }
    // createKVOptions的回调函数
    function initSelects(dict) {
      let selectDict = { 'kvcategory1': 'selectid1', 'kvcategory2': 'selectid2'};
      for (let k in selectDict) {
        let selectId = selectDict[k]
        if ($('#' + selectId).find('option').length) {
          return;
        }
        let list = dict[k];
        let ops = '<option value="">请选择...</option>';
        for (var i = 0, len = list.length; i < len; i++) {
          let item = list[i];
          if (item.Enabled == 0)
            continue;
          let op = `<option value="${item.Id}" title="${item.Comment}">${item.Title}</option>`;
          ops += op;
          $('#' + selectId).html(ops);
        }
      }
    }
    /**
     * 添加按钮
     * @@param thisobj 按钮对象
     */
    function add(thisobj) {
      return;
      // 验证
      let para = formCheck();
      if (para == false) return;
      if ($ui.isBtnLoading(thisobj)) {
        return;
      }
      // 发包
      post(cfg.@apiAddUrlKey, para)
        .then(data => {
          if (data.errcode == @AutoCode.ErrCode.Success) {
            msg.ok('服务器返回成功!');
            // 成功后重置表单
            resetForm();

          } else if (data.errcode == @AutoCode.ErrCode.SrvExp) {
            msg.err(data.errmsg || '@AutoCode.AlertMsg.服务器错误.ToString()');
          } else
            msg.info(data.errmsg);
          $ui.clsBtnLoading(thisobj, 500);
        })
        .catch(err => {
          msg.err(err.message);
          $ui.clsBtnLoading(thisobj, 500);
        });
    }

    /**
     * 表单验证,成功返回表单json,失败返回false
     */
    function formCheck() {
      let inputs = $('#@divEditId').find('input[name],select[name]');
      for (var i = 0, len = inputs.length; i < len; i++) {
        if (!$.formCheck(inputs[i]))
          return false;
      }
      let para = $.formJson($('#@divEditId')[0]);
      return para;
    }

    /**
     * 重置表单数据
     */
    function resetForm() {
      let today = $.datefmt(new Date(), 'yyyy/MM/dd');
      // 字段重置
      let def = {
        @foreach (Dictionary<string, string> item in Model.columns)
        {
            @("        "+item["fieldName"]) @Raw(" :" + "'',\r\n")
        }
      };
      $('#@divEditId input[name]').each(item => {
        item.value = def[item.name];
      })
      // 选项重置
      $('#@divEditId select[name]').each(item => {
        item.selectedIndex = 0;
      })
      chgTitle();
    }

    /**
     * 页面 新增/修改,状态切换 type=1,切换修改,type=0,切换新增,不传type,返回当前页面状态
     * @@param {number} type
     */
    function chgTitle(type) {
        if (type == 1) {
            $('#editFormTitle').text('🖍 更新').addClass('text-danger').prop('edittype',1);
        } else if (type == 0) {
            $('#editFormTitle').text('\u271A 新增').removeClass('text-danger').prop('edittype', 0);
        } else {
            return $('#editFormTitle').prop('edittype');
        }
    }
  })(window);
</script>
